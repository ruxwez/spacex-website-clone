---
import { VideoBackground } from "../../backgrounds/videoBackground";
import { ButtonPrimary } from "../../button/buttonPrimary";

interface IContent {
  isComing?: boolean;
  showSubtitle?: boolean;
  title: string;
  href: string;
  linkTitle?: string;
}

interface Props {
  type?: "header" | "section";
  isVideo?: boolean;
  src: string;
  content: IContent;
}

const {
  type: Element = "section",
  isVideo = false,
  src,
  content,
} = Astro.props;
---

<Element
  style={!isVideo
    ? `background:url('${src}') center center; background-size: cover;`
    : ""}
  class:list={["relative w-full h-screen"]}
>
  <div class="w-full h-full backdrop-brightness-75">
    <div class="container h-full flex items-end">
      <div
        class="flex flex-col items-start mb-32 gap-9 max-md:gap-4 uppercase text-white drop-shadow-md"
      >
        <div class="flex flex-col gap-2">
          {
            content.showSubtitle && (
              <p class="font-thin">
                {content.isComing ? "Upcoming launch" : "Recent launch"}
              </p>
            )
          }
          <h2
            class="text-5xl max-md:text-4xl max-w-[31rem] max-md:max-w-sm font-semibold"
          >
            {content.title}
          </h2>
        </div>
        <ButtonPrimary href={content.href} client:load>
          {content.linkTitle ? content.linkTitle : (content.isComing ? "Watch" : "Rewatch")}
        </ButtonPrimary>
      </div>
    </div>
  </div>
  <button class="absolute bottom-14 left-1/2 -translate-x-1/2 p-4">
    <svg
      width="30px"
      height="20px"
      class="animate-arrow-down"
      aria-label="more content below"
    >
      <path
        stroke="#ffffff"
        stroke-width="2px"
        fill="none"
        d="M2.000,5.000 L15.000,18.000 L28.000,5.000 "></path>
    </svg>
  </button>

  {
    isVideo && (
      <VideoBackground
        className="absolute top-0 left-0 -z-10"
        src={src}
      />
    )
  }
</Element>
